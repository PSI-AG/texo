«IMPORT org::eclipse::emf::texo::modelgenerator::modelannotations»
«IMPORT org::eclipse::emf::texo::annotations::annotationsmodel»
«IMPORT org::eclipse::emf::ecore»
«IMPORT org::eclipse::emf::texo::generator»

«EXTENSION  org::eclipse::emf::texo::modelgenerator::templates::util»

«DEFINE root(ModelController modelController) FOR EStructuralFeatureModelGenAnnotation-»
«LET ((EClassModelGenAnnotation)this.ownerEClassAnnotation) AS eClassAnnotation-»
«LET ((EPackageModelGenAnnotation)eClassAnnotation.ownerEPackageAnnotation) AS ePackageAnnotation»

«FILE classFileName(this) java-»
«ePackageAnnotation.javaFileHeader-»
package «ePackageAnnotation.packagePath»;

/**
 * A representation for the Feature Group '<em><b>«eClassAnnotation.EClass.name».«this.name»</b></em>'.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
«IF this.documentation != null-»
 * <!-- begin-model-doc -->
 * «this.documentation»
 * <!-- end-model-doc -->
«ENDIF-»
 * @generated
*/
«modelController.getJavaAnnotations(this.EStructuralFeature, "featureMap.type")-»
public class «this.featureMapSimpleClassName-»
«IF ePackageAnnotation.featureMapClassExtends != null && ePackageAnnotation.featureMapClassExtends.trim().length > 0-» extends «ePackageAnnotation.featureMapClassExtends-»«ENDIF-»
{

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 * Is used to identify which feature is set in this feature group.
	 * @generated
	 */
	public static enum Feature {
	«IF isMixed(this.EStructuralFeature)-»TEXT, CDATA, COMMENT«IF this.allMemberFeatureMapFeatures.size > 0-»,«ENDIF-»«ENDIF-»
	«FOREACH this.allMemberFeatureMapFeatures AS memberFeatureAnnotation SEPARATOR ","-»
   		«toUpperCase(memberFeatureAnnotation.name)»
    «ENDFOREACH-»
	}

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 * Returns only the values from the feature group which have the feature equal to the parameter.
	 *
	 * @param featureGroup
	 *            the featureGroup List to filter
	 * @param filterByFeature
	 *            filters by this enum
	 * @return a list with instances corresponding to the feature kind
	 * @see java.util.Collections#unmodifiableList(List)
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	public static <T> java.util.List<T> createUnmodifiableValueList(java.util.List<«this.featureMapSimpleClassName-»> featureGroup, Feature filterByFeature) {
		final java.util.List<Object> result = new java.util.ArrayList<Object>();
		for (final «this.featureMapSimpleClassName-» group : featureGroup) {
			if (group.getFeature() == filterByFeature) {
				result.add(group.getValue());
			}
		}
		return (List<T>) Collections.unmodifiableList(result);
	}

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 * Returns a single value from the feature group which has the feature equal to the parameter.
	 * The first found value is returned. If no value can be found then null is returned.
	 *
	 * @param featureGroup
	 *            the featureGroup List to filter
	 * @param filterByFeature
	 *            filters by this enum
	 * @return an instance corresponding to the feature kind or null if not found.
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	public static <T> T getSingleFeatureMapValue(java.util.List<«this.featureMapSimpleClassName-»> featureGroup, Feature filterByFeature) {
		for (final «this.featureMapSimpleClassName-» group : featureGroup) {
			if (group.getFeature() == filterByFeature) {
				return (T)group.getValue();
			}
		}
		return null;
	}

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 * Sets a single value in a feature group, if there is already a value set in the feature
	 * for the feature in question then it is replaced by the new value.
	 *
	 * @param featureGroup
	 *            the featureGroup List to find the value
	 * @param feature
	 *            sets this feature
	 * @param value
	 *            the value to set
	 * @generated
	 */
	public static void setSingleFeatureMapValue(java.util.List<«this.featureMapSimpleClassName-»> featureGroup, Feature feature, Object value) {
		for (final «this.featureMapSimpleClassName-» group : featureGroup) {
			if (group.getFeature() == feature) {
				group.setValue(feature, value);
				return;
			}
		}
		final «this.featureMapSimpleClassName» entry = new «this.featureMapSimpleClassName»();
		entry.setValue(feature, value);
		featureGroup.add(entry);
	}

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 * Creates a list of group instances set with the passed feature and values.
	 *
	 * @param feature
	 *            the feature to set
	 * @param values
	 *            the values to set as value of each group instance in the result.
	 * @return a list with instances of this class, set with the Feature and values
	 * @generated
	 */
	public static java.util.List<«this.featureMapSimpleClassName»> createFeatureGroupList(Feature feature, List<?> values) {
		final java.util.List<«this.featureMapSimpleClassName»> result = new java.util.ArrayList<«this.featureMapSimpleClassName»>();
		for (Object value : values) {
			final «this.featureMapSimpleClassName» group = new «this.featureMapSimpleClassName»();
			group.setValue(feature, value);
			result.add(group);
		}
		return result;
	}

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 * @generated
	 */
	«modelController.getJavaAnnotations(this.EStructuralFeature, "featureMap.feature")-»
	private Feature feature = null;

«IF isMixed(this.EStructuralFeature)-»
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	«modelController.getJavaAnnotations(this.EStructuralFeature, "featureMap.text")-»
	private String text;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	«modelController.getJavaAnnotations(this.EStructuralFeature, "featureMap.cdata")-»
	private String cDATA;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	«modelController.getJavaAnnotations(this.EStructuralFeature, "featureMap.comment")-»
	private String comment;
«ENDIF-»
	«FOREACH this.memberFeatureMapFeatures AS memberFeatureAnnotation-»

	«IF memberFeatureAnnotation.featureMapFeature == this-»
	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 * @generated
	*/
	«modelController.getJavaAnnotations(memberFeatureAnnotation.EStructuralFeature, "featureMap.field")-»
	private «memberFeatureAnnotation.itemType» «memberFeatureAnnotation.validJavaMemberName»;
	«ENDIF-»
	«ENDFOREACH-»

	/**
	 * @generated
	 */
	public void setFeature(Feature feature) {
		this.feature = feature;
	}

	/**
	 * @generated
	 */
	public Feature getFeature() {
		return feature;
	}

«IF isMixed(this.EStructuralFeature)-»
	/**
	 * Returns the value of '<em><b>text</b></em>' feature.
	 *
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the value of '<em><b>text</b></em>' feature
	 * @generated
	 */
	public String getText() {
		return text;
	}

	/**
	 * Sets the '{@link LetterBodyType#getText() <em>text</em>}' feature.
	 *
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param newText
	 *            the new value of the '{@link LetterBodyType#getText() text}' feature.
	 * @generated
	 */
	public void setText(String newText) {
		text = newText;
		setFeature(Feature.TEXT);
	}

	/**
	 * Returns the value of '<em><b>cDATA</b></em>' feature.
	 *
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the value of '<em><b>cDATA</b></em>' feature
	 * @generated
	 */
	public String getCDATA() {
		return cDATA;
	}

	/**
	 * Sets the '{@link LetterBodyType#getCDATA() <em>cDATA</em>}' feature.
	 *
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param newCDATA
	 *            the new value of the '{@link LetterBodyType#getCDATA() cDATA}' feature.
	 * @generated
	 */
	public void setCDATA(String newCDATA) {
		cDATA = newCDATA;
		setFeature(Feature.CDATA);
	}

	/**
	 * Returns the value of '<em><b>comment</b></em>' feature.
	 *
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the value of '<em><b>comment</b></em>' feature
	 * @generated
	 */
	public String getComment() {
		return comment;
	}

	/**
	 * Sets the '{@link LetterBodyType#getComment() <em>comment</em>}' feature.
	 *
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param newComment
	 *            the new value of the '{@link LetterBodyType#getComment() comment}' feature.
	 * @generated
	 */
	public void setComment(String newComment) {
		comment = newComment;
		setFeature(Feature.COMMENT);
	}
«ENDIF-»
	«FOREACH this.allMemberFeatureMapFeatures AS memberFeatureAnnotation-»

		/**
		 * Returns the value of '<em><b>«memberFeatureAnnotation.EStructuralFeature.name»</b></em>' feature.
		 *
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @return the value of '<em><b>«memberFeatureAnnotation.EStructuralFeature.name»</b></em>' feature
		 * @generated
		 */
		«modelController.getJavaAnnotations(memberFeatureAnnotation.EStructuralFeature, "featureMap.getter")-»
		public «memberFeatureAnnotation.itemType» «memberFeatureAnnotation.getter»() {
		«IF memberFeatureAnnotation.featureMapFeature == this-»
			return «memberFeatureAnnotation.validJavaMemberName»;
		«ELSE-»
			if («memberFeatureAnnotation.featureMapFeature.getter»() == null) {
				return null;
			}
			return «memberFeatureAnnotation.featureMapFeature.getter»().«memberFeatureAnnotation.getter»();
		«ENDIF-»
		}

		/**
		 * Sets the '{@link «eClassAnnotation.simpleClassName»#«memberFeatureAnnotation.getter»() <em>«memberFeatureAnnotation.EStructuralFeature.name»</em>}' feature.
		 *
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @param new«toFirstUpper(memberFeatureAnnotation.name)»
		 *            the new value of the '{@link «eClassAnnotation.simpleClassName»#«memberFeatureAnnotation.getter»() «memberFeatureAnnotation.EStructuralFeature.name»}' feature.
		 * @generated
		 */
		«modelController.getJavaAnnotations(memberFeatureAnnotation.EStructuralFeature, "featureMap.setter")-»
		public void «memberFeatureAnnotation.setter»(«memberFeatureAnnotation.itemType» new«toFirstUpper(memberFeatureAnnotation.name)») {
			«IF memberFeatureAnnotation.featureMapFeature == this-»
			«memberFeatureAnnotation.validJavaMemberName» = new«toFirstUpper(memberFeatureAnnotation.name)»;
			setFeature(Feature.«toUpperCase(memberFeatureAnnotation.name)»);
			«ELSE-»
				if («memberFeatureAnnotation.featureMapFeature.getter»() == null) {
					«memberFeatureAnnotation.featureMapFeature.setter»(new «memberFeatureAnnotation.featureMapFeature.featureMapQualifiedClassName»());
				}
				«memberFeatureAnnotation.featureMapFeature.getter»().«memberFeatureAnnotation.setter»(new«toFirstUpper(memberFeatureAnnotation.name)»);
			«ENDIF-»
		}
	«ENDFOREACH-»

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @return the value of this feature map entry. The type of the returned value is based on the feature.
 	 * @see #getFeature()
	 * @generated
	 */
	public Object getValue() {
		switch (getFeature()) {
«IF isMixed(this.EStructuralFeature)-»
		case TEXT:
			return getText();
		case CDATA:
			return getCDATA();
		case COMMENT:
			return getComment();
«ENDIF-»
	«FOREACH this.allMemberFeatureMapFeatures AS memberFeatureAnnotation-»
			case «toUpperCase(memberFeatureAnnotation.name)»:
				return «memberFeatureAnnotation.getter»();
	«ENDFOREACH-»
			default:
				throw new IllegalStateException("Feature kind " + getFeature() + " is not supported for this object " + this);
		}
	}

	/**
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @param feature
 	 *            the feature to set
 	 * @param value
 	 *            the value to set in this instance
 	 * @see #getFeature()
	 * @generated
	 */
	public void setValue(Feature feature, Object value) {
		switch (feature) {
«IF isMixed(this.EStructuralFeature)-»
		case TEXT:
			setText((String)value);
			break;
		case CDATA:
			setCDATA((String)value);
			break;
		case COMMENT:
			setComment((String)value);
			break;
«ENDIF-»
	«FOREACH this.allMemberFeatureMapFeatures AS memberFeatureAnnotation-»
			case «toUpperCase(memberFeatureAnnotation.name)»:
				«memberFeatureAnnotation.setter»((«memberFeatureAnnotation.itemType»)value);
				break;
	«ENDFOREACH-»
			default:
			throw new IllegalStateException("Feature kind " + getFeature() + " is not supported for this object " + this);
		}
	}
}
«ENDFILE-»
«ENDLET»
«ENDLET»
«ENDDEFINE»